package co.edu.unbosque.bookingback.controller;

import co.edu.unbosque.bookingback.model.BookingDTO;
import co.edu.unbosque.bookingback.model.PackageEntity;
import co.edu.unbosque.bookingback.service.BookingService;
import co.edu.unbosque.bookingback.service.PackageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/bookings")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @Autowired
    private PackageService packageService;

    @GetMapping("/{bookingId}")
    public BookingDTO getBookingById(@PathVariable int bookingId) {
        return bookingService.findById(bookingId);
    }

    @GetMapping("/getByCustomer/{customerId}")
    public List<BookingDTO> getBookingByCustomerId(@PathVariable int customerId) {
        return bookingService.findByCustomerId(customerId);
    }

    @PostMapping("/createBooking")
    public ResponseEntity<Object> createBooking(@RequestBody Map<String, String> body) {
        int customer_id = Integer.parseInt(body.get("customer_id"));
        Instant instant = Instant.parse(body.get("booking_date"));
        Date booking_date = Date.from(instant);
        int package_id = Integer.parseInt(body.get("package_id"));
        String status = body.get("booking_status");
        PackageEntity packageEntity = packageService.findByIdEntity(package_id);
        String name = body.get("name");
        String email = body.get("email");
        String phone = body.get("phone");
        java.sql.Date booking_date_sql = new java.sql.Date(booking_date.getTime());
        BookingDTO bookingDTO = new BookingDTO(0, customer_id, booking_date_sql, status, name, email, phone, packageEntity);
        BookingDTO createdBooking = bookingService.save(bookingDTO);
        return new ResponseEntity<>(createdBooking, HttpStatus.CREATED);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBooking(@PathVariable int id) {
        bookingService.deleteById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping("/showAll")
    public ResponseEntity<List<BookingDTO>> getAllBookings() {
        List<BookingDTO> bookings = bookingService.findAll();
        return new ResponseEntity<>(bookings, HttpStatus.OK);
    }
}